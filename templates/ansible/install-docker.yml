---
# Ansible Playbook: Install Docker
# This playbook installs Docker CE on Ubuntu/Debian systems with robust error handling
#
# ‚ö†Ô∏è  IMPORTANT: APT cache update logic has been moved to update-apt-cache.yml
# Run the update-apt-cache.yml playbook first if you need to update the package cache.
# This separation helps avoid CI issues with network-sensitive operations.
#
# üîß ROBUSTNESS: This playbook includes fallback mechanisms for network issues:
# - Retries with backoff for network operations
# - Fallback to system repositories if Docker repo setup fails
# - Graceful handling of CI environment limitations
# - Based on known GitHub Actions network issues: https://github.com/actions/runner-images/issues/2890
#
# üîó RELATIONSHIP WITH INFRASTRUCTURE:
# 1. This playbook runs after VM provisioning (OpenTofu) and cloud-init completion
# 2. It prepares the VM for running containerized applications
# 3. Can be used as part of a larger deployment pipeline for Torrust applications
# 4. Assumes APT cache is already updated (via update-apt-cache.yml or manually)
# 5. Will skip Docker installation gracefully if network issues prevent repository access

# Define which hosts this playbook will run on
- name: Install Docker
  hosts: all # Run on all hosts defined in inventory.yml
  gather_facts: true # Collect system information to determine OS and version
  become: true # Use sudo/root privileges for system-level operations

  # Variables that can be customized
  vars:
    docker_edition: ce # Community Edition
    docker_package: "docker-{{ docker_edition }}"
    # Map architecture to Docker repository format
    docker_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}"

  # List of tasks to execute in order
  tasks:
    # NOTE: APT cache update logic has been moved to update-apt-cache.yml
    # Run that playbook first if you need to update the package cache

    # Task 0: Detect CI environment to adjust behavior
    - name: Detect CI environment
      ansible.builtin.set_fact:
        is_ci_environment: "{{ ansible_env.GITHUB_ACTIONS is defined or ansible_env.CI is defined }}"
        ci_type: "{% if ansible_env.GITHUB_ACTIONS is defined %}github_actions{% elif ansible_env.CI is defined %}generic_ci{% else %}local{% endif %}"

    - name: Display environment information
      ansible.builtin.debug:
        msg: |
          Environment: {{ ci_type }}
          CI Environment: {{ is_ci_environment }}
          Note: CI environments may have network connectivity limitations

    # Task 1: Install required packages for Docker repository with retries
    - name: Install required packages for Docker repository
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        force_apt_get: true
        update_cache: false # Skip cache update - assume it was done separately
      register: prereq_packages
      retries: 3
      delay: 10
      until: prereq_packages is succeeded
      when: ansible_os_family == "Debian"

    # Task 2: Add Docker's official GPG key with retries and better error handling
    - name: Create keyrings directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"
      when: ansible_os_family == "Debian"

    - name: Add Docker's official GPG key (with retries and CI-aware timeouts)
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: "0644"
        timeout: "{{ 60 if is_ci_environment else 30 }}"
        force: true
      register: docker_gpg_key
      retries: "{{ 5 if is_ci_environment else 3 }}"
      delay: "{{ 30 if is_ci_environment else 10 }}"
      until: docker_gpg_key is succeeded
      when: ansible_os_family == "Debian"
      ignore_errors: true

    # Fallback: Use curl to download GPG key if get_url fails (especially for CI)
    - name: Fallback - Download Docker GPG key with curl (CI-optimized)
      ansible.builtin.shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
          --connect-timeout {{ 60 if is_ci_environment else 30 }} \
          --max-time {{ 180 if is_ci_environment else 60 }} \
          --retry {{ 5 if is_ci_environment else 2 }} \
          --retry-delay {{ 30 if is_ci_environment else 15 }} \
          --retry-connrefused \
          -o /etc/apt/keyrings/docker.asc
        chmod 644 /etc/apt/keyrings/docker.asc
      register: docker_gpg_curl
      when:
        - ansible_os_family == "Debian"
        - docker_gpg_key is failed
      retries: "{{ 3 if is_ci_environment else 2 }}"
      delay: "{{ 45 if is_ci_environment else 15 }}"
      until: docker_gpg_curl.rc == 0
      ignore_errors: true

    # Final fallback: Skip Docker installation if GPG key cannot be obtained
    - name: Check if Docker GPG key exists
      ansible.builtin.stat:
        path: /etc/apt/keyrings/docker.asc
      register: docker_gpg_exists
      when: ansible_os_family == "Debian"

    - name: Warning about Docker GPG key failure
      ansible.builtin.debug:
        msg: |
          ‚ö†Ô∏è  WARNING: Could not download Docker GPG key due to network issues.
          {% if is_ci_environment %}
          This is a known limitation in CI environments, particularly GitHub Actions.
          See: https://github.com/actions/runner-images/issues/2890
          {% else %}
          This may be due to network connectivity issues or firewall restrictions.
          {% endif %}
          Docker installation will be skipped but the playbook will continue.
      when:
        - ansible_os_family == "Debian"
        - not docker_gpg_exists.stat.exists

    # Task 3: Add Docker repository (only if GPG key exists)
    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ docker_arch }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
        update_cache: true # Need to update cache after adding new repository
      when:
        - ansible_os_family == "Debian"
        - docker_gpg_exists.stat.exists
      register: docker_repo_added

    # Task 4: Install Docker packages with retries (only if repository was added)
    - name: Install Docker packages
      ansible.builtin.apt:
        name:
          - "{{ docker_package }}"
          - "{{ docker_package }}-cli"
          - containerd.io
          - docker-buildx-plugin
        state: present
        force_apt_get: true
        update_cache: false # Skip cache update - assume repository was updated separately
      register: docker_install
      retries: 3
      delay: 10
      until: docker_install is succeeded
      when:
        - ansible_os_family == "Debian"
        - docker_gpg_exists.stat.exists
        - docker_repo_added is succeeded

    # Alternative: Try to install Docker from default repositories if GPG/repo setup failed
    - name: Fallback - Install Docker from default repositories
      ansible.builtin.apt:
        name:
          - docker.io
          - docker-compose
        state: present
        force_apt_get: true
        update_cache: false
      register: docker_fallback_install
      when:
        - ansible_os_family == "Debian"
        - not docker_gpg_exists.stat.exists
      ignore_errors: true

    # Task 5: Start and enable Docker service (if Docker was installed)
    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true
      when: docker_install is succeeded or docker_fallback_install is succeeded

    # Task 6: Add user to docker group (for non-root Docker usage) (if Docker was installed)
    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true
      register: user_added_to_docker_group
      when: docker_install is succeeded or docker_fallback_install is succeeded

    # Task 7: Verify Docker installation (if Docker was installed)
    - name: Verify Docker installation
      ansible.builtin.command: docker --version
      register: docker_version
      changed_when: false
      when: docker_install is succeeded or docker_fallback_install is succeeded
      ignore_errors: true

    # Task 8: Display Docker version (if Docker was installed)
    - name: Display Docker version
      ansible.builtin.debug:
        msg: "{{ docker_version.stdout }}"
      when:
        - docker_version is defined
        - docker_version is succeeded

    # Task 9: Display Docker installation failure message
    - name: Display Docker installation status
      ansible.builtin.debug:
        msg: |
          ‚ö†Ô∏è  Docker installation was skipped due to network connectivity issues.
          {% if is_ci_environment %}
          This is a known issue with {{ ci_type }} environments - see:
          https://github.com/actions/runner-images/issues/2890

          The playbook completed successfully despite this limitation.
          In production environments, network connectivity should be stable.
          {% else %}
          This may be due to firewall restrictions or temporary network issues.
          Please check network connectivity and try again.
          {% endif %}
      when:
        - docker_install is skipped or docker_install is failed
        - docker_fallback_install is skipped or docker_fallback_install is failed

    # Task 10: Test Docker with hello-world (optional verification) (if Docker was installed)
    - name: Test Docker with hello-world container
      ansible.builtin.command: docker run --rm hello-world
      register: docker_test
      changed_when: false
      ignore_errors: true # Don't fail the playbook if this test fails
      when:
        - docker_version is defined
        - docker_version is succeeded

    # Task 11: Display Docker test result (if Docker test ran)
    - name: Display Docker test result
      ansible.builtin.debug:
        msg: "{{ docker_test.stdout }}"
      when:
        - docker_test is defined
        - docker_test is succeeded

    # Task 12: Warning about group membership (if user was added to Docker group)
    - name: Important notice about Docker group membership
      ansible.builtin.debug:
        msg: |
          ‚ö†Ô∏è  IMPORTANT: User '{{ ansible_user }}' has been added to the 'docker' group.
          You may need to log out and log back in (or restart the session) for this change to take effect.
          Alternatively, you can use 'newgrp docker' to activate the group membership in the current session.

          NOTE: If you need to update the APT cache, run the update-apt-cache.yml playbook first.
          {% if is_ci_environment %}
          CI Environment Note: This playbook is designed to handle network limitations gracefully.
          {% endif %}
      when: user_added_to_docker_group is changed

  # Handlers section - tasks that run when triggered by other tasks
  handlers:
    # Handler: Restart Docker service if needed
    - name: restart docker
      ansible.builtin.systemd:
        name: docker
        state: restarted
